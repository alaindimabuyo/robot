{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","actions.js","constants.js","containers/App.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","setState","Component","requestRobots","dispatch","fetch","then","response","json","data","payload","catch","error","App","_this2","users","_this$props","onSearchChange","filterRobot","filter","robot","toLowerCase","includes","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","isPending","event","target","value","onRequestRobots","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a1641ca0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        \r\n        <div className= 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt ='robot' src={`https://robohash.org/${id}?set=set4?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n \r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user, i) =>{\r\n                    return  (<Card key={i} \r\n                    id={robots[i].id} \r\n                    name ={robots[i].name} \r\n                    email = {robots[i].email} />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchField, searchChange}) => {\r\n    return (\r\n        <div className = 'pa2'>\r\n            <input \r\n                className = 'pa3 ba b--green bg-lightest-blue'\r\n                type = 'search' \r\n                placeholder = 'search robots'\r\n                onChange = {searchChange}\r\n            />\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return(\r\n        <div style={{overflowY:'scroll', border: '1px solid black', height: '500px'}}>\r\n\r\n            {props.children}\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componenDidCatch(){\r\n        this.setState({hasError:true})\r\n    }\r\n    render(){\r\n        if (this.state.hasError){\r\n            return <h1>that is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import {\r\n    Change_Search_Field,\r\n    Request_Robots_Pending,\r\n    Request_Robots_Success,\r\n    Request_Robots_Failed\r\n} from './constants';\r\n\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n    type:Change_Search_Field,\r\n    payload: text\r\n})\r\n\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({type: Request_Robots_Pending});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data =>dispatch({type: Request_Robots_Success, payload: data}))\r\n        .catch(error => dispatch({type: Request_Robots_Failed, payload: error}))\r\n}","export const Change_Search_Field = 'Change_Search_Field';\r\n\r\nexport const Request_Robots_Pending = 'Request_Robots_Pending';\r\nexport const Request_Robots_Success = 'Request_Robots_Success';\r\nexport const Request_Robots_Failed = 'Request_Robots_Failed';","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport {setSearchField, requestRobots} from '../actions'\r\n\r\nconst mapStatetoProps = state => {\r\n    return{\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    }\r\n}\r\n\r\nconst mapDispatchtoProps = (dispatch) => {\r\n   return { \r\n       onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots)\r\n    }\r\n\r\n}\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            \r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=>{return response.json();\r\n        })\r\n        .then(users=>{\r\n            this.setState({ robots: users });\r\n        })\r\n        \r\n    }\r\n\r\n\r\n    \r\n        \r\n    render(){\r\n        const { robots} = this.state;\r\n        const { searchField, onSearchChange} = this.props;\r\n        const filterRobot = robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return(\r\n        <div className ='tc'>\r\n            <h1>Robofriends</h1>\r\n            <SearchBox searchChange = {onSearchChange}/>\r\n            <Scroll>\r\n                <ErrorBoundary>\r\n                <CardList robots={filterRobot}/>\r\n                </ErrorBoundary>\r\n            </Scroll>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStatetoProps, mapDispatchtoProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {Change_Search_Field, Request_Robots_Pending, Request_Robots_Success, Request_Robots_Failed} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField:  ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) =>{\r\n    switch(action.type){\r\n        case Change_Search_Field:\r\n        return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n        return state;\r\n\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type){\r\n        case Request_Robots_Pending:\r\n            return Object.assign({}, state, {isPending: true})\r\n        case Request_Robots_Success:\r\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\r\n        case Request_Robots_Failed:\r\n            return Object.assign({}, state, {error: action.payload, isPending:false}) \r\n            default:\r\n             return state;       \r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store = \ncreateStore(rootReducer, applyMiddleware(thunkMiddleware,logger))\n\n\nReactDOM.render(<Provider store={store}>\n                <App />\n                </Provider>\n    \n                , document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}